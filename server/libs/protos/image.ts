// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: image.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "image";

export interface UploadRequest {
  chunk: Uint8Array;
  filename: string;
  mimetype: string;
  userId: string;
}

export interface UploadResponse {
  id: string;
  status: string;
}

export interface UserRequest {
  userId: string;
}

export interface ImageResponse {
  id: string;
  status: string;
  name: string;
  uploadedAt: string;
  size: string;
}

export interface ProcessedImageResponse {
  url?: string | undefined;
}

function createBaseUploadRequest(): UploadRequest {
  return { chunk: new Uint8Array(0), filename: "", mimetype: "", userId: "" };
}

export const UploadRequest: MessageFns<UploadRequest> = {
  encode(message: UploadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chunk.length !== 0) {
      writer.uint32(10).bytes(message.chunk);
    }
    if (message.filename !== "") {
      writer.uint32(18).string(message.filename);
    }
    if (message.mimetype !== "") {
      writer.uint32(26).string(message.mimetype);
    }
    if (message.userId !== "") {
      writer.uint32(34).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chunk = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filename = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.mimetype = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadRequest {
    return {
      chunk: isSet(object.chunk) ? bytesFromBase64(object.chunk) : new Uint8Array(0),
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      mimetype: isSet(object.mimetype) ? globalThis.String(object.mimetype) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: UploadRequest): unknown {
    const obj: any = {};
    if (message.chunk.length !== 0) {
      obj.chunk = base64FromBytes(message.chunk);
    }
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.mimetype !== "") {
      obj.mimetype = message.mimetype;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadRequest>, I>>(base?: I): UploadRequest {
    return UploadRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadRequest>, I>>(object: I): UploadRequest {
    const message = createBaseUploadRequest();
    message.chunk = object.chunk ?? new Uint8Array(0);
    message.filename = object.filename ?? "";
    message.mimetype = object.mimetype ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseUploadResponse(): UploadResponse {
  return { id: "", status: "" };
}

export const UploadResponse: MessageFns<UploadResponse> = {
  encode(message: UploadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: UploadResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadResponse>, I>>(base?: I): UploadResponse {
    return UploadResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadResponse>, I>>(object: I): UploadResponse {
    const message = createBaseUploadResponse();
    message.id = object.id ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseUserRequest(): UserRequest {
  return { userId: "" };
}

export const UserRequest: MessageFns<UserRequest> = {
  encode(message: UserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: UserRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserRequest>, I>>(base?: I): UserRequest {
    return UserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserRequest>, I>>(object: I): UserRequest {
    const message = createBaseUserRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseImageResponse(): ImageResponse {
  return { id: "", status: "", name: "", uploadedAt: "", size: "" };
}

export const ImageResponse: MessageFns<ImageResponse> = {
  encode(message: ImageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.uploadedAt !== "") {
      writer.uint32(42).string(message.uploadedAt);
    }
    if (message.size !== "") {
      writer.uint32(50).string(message.size);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.uploadedAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.size = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uploadedAt: isSet(object.uploadedAt) ? globalThis.String(object.uploadedAt) : "",
      size: isSet(object.size) ? globalThis.String(object.size) : "",
    };
  },

  toJSON(message: ImageResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uploadedAt !== "") {
      obj.uploadedAt = message.uploadedAt;
    }
    if (message.size !== "") {
      obj.size = message.size;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImageResponse>, I>>(base?: I): ImageResponse {
    return ImageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImageResponse>, I>>(object: I): ImageResponse {
    const message = createBaseImageResponse();
    message.id = object.id ?? "";
    message.status = object.status ?? "";
    message.name = object.name ?? "";
    message.uploadedAt = object.uploadedAt ?? "";
    message.size = object.size ?? "";
    return message;
  },
};

function createBaseProcessedImageResponse(): ProcessedImageResponse {
  return { url: undefined };
}

export const ProcessedImageResponse: MessageFns<ProcessedImageResponse> = {
  encode(message: ProcessedImageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== undefined) {
      writer.uint32(10).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessedImageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessedImageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessedImageResponse {
    return { url: isSet(object.url) ? globalThis.String(object.url) : undefined };
  },

  toJSON(message: ProcessedImageResponse): unknown {
    const obj: any = {};
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessedImageResponse>, I>>(base?: I): ProcessedImageResponse {
    return ProcessedImageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessedImageResponse>, I>>(object: I): ProcessedImageResponse {
    const message = createBaseProcessedImageResponse();
    message.url = object.url ?? undefined;
    return message;
  },
};

export interface ImageService {
  Upload(request: UploadRequest): Promise<UploadResponse>;
  GetLatestImage(request: UserRequest): Promise<ImageResponse>;
  GetLatestProcessedImage(request: UserRequest): Promise<ProcessedImageResponse>;
}

export const ImageServiceServiceName = "image.ImageService";
export class ImageServiceClientImpl implements ImageService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ImageServiceServiceName;
    this.rpc = rpc;
    this.Upload = this.Upload.bind(this);
    this.GetLatestImage = this.GetLatestImage.bind(this);
    this.GetLatestProcessedImage = this.GetLatestProcessedImage.bind(this);
  }
  Upload(request: UploadRequest): Promise<UploadResponse> {
    const data = UploadRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Upload", data);
    return promise.then((data) => UploadResponse.decode(new BinaryReader(data)));
  }

  GetLatestImage(request: UserRequest): Promise<ImageResponse> {
    const data = UserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLatestImage", data);
    return promise.then((data) => ImageResponse.decode(new BinaryReader(data)));
  }

  GetLatestProcessedImage(request: UserRequest): Promise<ProcessedImageResponse> {
    const data = UserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLatestProcessedImage", data);
    return promise.then((data) => ProcessedImageResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
